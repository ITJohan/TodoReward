@inject UserStateContainer UserStateContainer

<div class="card">
    <div class="header">
        @if (_editing)
        {
            <input @bind="Todo.Description" />
            <div class="buttons">
                <button class="success-button" @onclick="ToggleEdit">Save</button>
                <button class="danger-button" @onclick="DeleteTodo">Delete</button>
            </div>
        }
        else
        {
            <p>@Todo.Description</p>
            <div class="buttons">
                <button class="primary-button" @onclick="ToggleEdit">Edit</button>
                <button class="success-button" @onclick="HandleDone">Done</button>
            </div>
        }
    </div>
    <div class="info">
        @if (_editing)
        {
            <div>📅 <input class="info-input" @bind="_timeLeft" /> days</div>
            <div>🔁 <input class="info-input" @bind="Todo.RepeatInterval" /> days</div>
            <div>⭐ <input class="info-input" @bind="Todo.Points" /> points</div>
        }
        else
        {
            <div>📅 @_timeLeft days</div>
            <div>🔁 @Todo.RepeatInterval days</div>
            <div>⭐ @Todo.Points points</div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Todo Todo { get; set; }
    [Parameter]
    public Action DeleteTodo { get; set; }
    [Parameter]
    public Action OrderTodos { get; set; }

    private int _timeLeft { get; set; }
    private bool _editing { get; set; }

    private void ToggleEdit()
    {
        _editing = !_editing;
        OrderTodos();
    }

    protected override Task OnInitializedAsync()
    {
        _timeLeft = CalculateTimeLeft();

        if (Todo.Description == null)
        {
            _editing = true;
        }

        return base.OnInitializedAsync();
    }

    private void HandleDone()
    {
        if (_timeLeft < 0)
        {
            UserStateContainer.Points -= Todo.Points;
        }
        else
        {
            UserStateContainer.Points += Todo.Points;
        }

        if (Todo.RepeatInterval > 0)
        {
            Todo.StartTime = DateTimeOffset.UtcNow;
            _timeLeft = CalculateTimeLeft();
            OrderTodos();
        }
        else
        {
            DeleteTodo();
        }
    }

    private int CalculateTimeLeft()
    {
        int difference = (DateTimeOffset.UtcNow - Todo.StartTime).Days;
        int timeLeft = Todo.RepeatInterval - difference;
        return timeLeft;
    }
}
